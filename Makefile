# Developer note:
#
# Run `make` or `make help` to display a list of targets and help texts.
#
# If you add a new command, add a help text by adding a comment on the same
# line as the target name. You should use the following structure:
# `<target name>:  ## <help text>`
.PHONY: help
.DEFAULT_GOAL := help
help:
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage: make \033[36m<target>\033[0m\n\n"} /^[a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-10s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

# Makefile
new: ## Creates a new module - `make new MODULE=module-name`
	@cp -r src/templates/module modules/${MODULE}
	@cp src/templates/module.mk modules/${MODULE}/Makefile

new-blank: ## Creates a new module - `make new MODULE=module-name`
	@mkdir -p modules/${MODULE}/{docs,templates,test}
	@touch modules/${MODULE}/{main,providers,outputs,variables}.tf
	@echo "# ${MODULE}" >> modules/${MODULE}/README.md
	@git checkout -b feat/${MODULE}
	@cd modules/${MODULE}
	@git commit -m "Added template for '${MODULE}' generated by Makefile"

terraform-tools-install: ## Installs tools that this repository uses
	@brew install terraform-docs infracost

terraform-generate-docs: ## Outputs the command for generating documentation
	@echo "terraform-docs markdown table --output-file README.md ."

terraform-format: ## Formats the repository according to Hashicorp's format standards
	terraform fmt -recursive
